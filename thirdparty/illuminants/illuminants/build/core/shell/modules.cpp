/*****************************************************************************
 * GENERATED CLASS - ALL CHANGES ARE LOST AFTER RECONFIGURATION OF THE VOLE
 * PROJECT.
 *
 * DO NOT EDIT THIS FILE (UNLESS YOU REALLY KNOW WHAT YOU DO) - IF IT DOES NOT
 * SUIT YOUR NEEDS, CHANGE THE APPROPRIATE VOLE COMPONENT THAT LEFT ITS TRACES
 * HERE!
 ****************************************************************************/

#include "modules.h"

namespace vole {

Modules::Modules() {
	Command *c;

	
	/* Caching Super Class */
	c = new vole::CommandCacheAdministration(); insert(std::make_pair(c->getName(), c));
	/* Base Methods for reflectance analysis, e.g. helper methods for reading images */
	c = new rbase::CommandSrgb2Rgb(); insert(std::make_pair(c->getName(), c));
	/* Algorithms for Superpixel Segmentation */
	c = new vole::CommandFelzenszwalb(); insert(std::make_pair(c->getName(), c));
	/* Algorithms for Superpixel Segmentation */
	c = new vole::CommandVeksler(); insert(std::make_pair(c->getName(), c));
	/* Illuminant Estimation Algorithms */
	c = new illumestimators::GrayWorldCommand(); insert(std::make_pair(c->getName(), c));
	/* Illuminant Estimation Algorithms */
	c = new illumestimators::BayesianCommand(); insert(std::make_pair(c->getName(), c));
	/* Command Interface for IIC-based illuminant estimators */
	c = new iic::CommandIebv(); insert(std::make_pair(c->getName(), c));
	/* Command Interface for IIC-based illuminant estimators */
	c = new iic::CommandTestIebv(); insert(std::make_pair(c->getName(), c));
	/* Command Interface for IIC-based illuminant estimators */
	c = new iic::CommandTestCache(); insert(std::make_pair(c->getName(), c));
	/* Evaluation helper commands for IIC-based methods */
	c = new iic::FuntEval(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandColorIllumField(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandLocalIebv(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandLocalTan(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandTanOrig(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandGrayworldOrig(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandLocalGrayworld(); insert(std::make_pair(c->getName(), c));
	/* Local Illuminant Estimation */
	c = new lille::CommandLocalBayesian(); insert(std::make_pair(c->getName(), c));

}

}
